user www-data;
worker_processes auto;
worker_cpu_affinity auto;
pid /run/nginx.pid;

load_module modules/ngx_http_headers_more_filter_module.so;
#uncomment to use CrowdSec Nginx Bouncer with Lua
#Load CrowdSec
#load_module modules/ndk_http_module.so;
#load_module modules/ngx_http_lua_module.so;
#uncomment if you use modsecurity
#If you use ModSecurity and CrowdSec then make sure you load CrowdSec FIRST
#Load ModSecurity
#load_module modules/ngx_http_modsecurity_module.so;

events
{
        worker_connections 16384;
        multi_accept on;
        use epoll;
}

# worker_rlimit_nofile = (worker_connections * 1) + 500
# worker_rlimit_nofile = (worker_connections * 2) + 500 if you use nginx as reverse proxy

worker_rlimit_nofile 33268;

http
{

        ##
        # Cloudflare Real IP
        ##

        set_real_ip_from 103.21.244.0/22;
        set_real_ip_from 103.22.200.0/22;
        set_real_ip_from 103.31.4.0/22;
        set_real_ip_from 104.16.0.0/13;
        set_real_ip_from 104.24.0.0/14;
        set_real_ip_from 108.162.192.0/18;
        set_real_ip_from 131.0.72.0/22;
        set_real_ip_from 141.101.64.0/18;
        set_real_ip_from 162.158.0.0/15;
        set_real_ip_from 172.64.0.0/13;
        set_real_ip_from 173.245.48.0/20;
        set_real_ip_from 188.114.96.0/20;
        set_real_ip_from 190.93.240.0/20;
        set_real_ip_from 197.234.240.0/22;
        set_real_ip_from 198.41.128.0/17;
        set_real_ip_from 2400:cb00::/32;
        set_real_ip_from 2606:4700::/32;
        set_real_ip_from 2803:f800::/32;
        set_real_ip_from 2405:b500::/32;
        set_real_ip_from 2405:8100::/32;
        set_real_ip_from 2a06:98c0::/29;
        set_real_ip_from 2c0f:f248::/32;

        ##
        # Basic Settings
        ##

        server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##VirtualHosts and configs includes
        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*.conf;

        ##
        # TLS Settings
        ##

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ecdh_curve X25519:secp256r1:secp384r1:secp521r1:sect571r1;
        #uncomment and replace above if you want 100% in key exchange for ssl labs
        #ssl_ecdh_curve secp384r1:secp521r1:sect571r1;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-ARIA256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-CCM8:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-ARIA128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;        
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        ##OCSP settings
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem; # <- add path to cert chain for OCSP stapling

        ##
        # Headers
        ##
                
        #Remove Nginx version from headers and error pages
        server_tokens off;

        #Hide PHP
        proxy_hide_header X-Powered-By;
        #Hide nginx header
        more_set_headers "Server : ";

        #Security Headers

        #XSS auditor can introduce XSS vulnerabilities in otherwise safe code, it is deprecated and should be disabled.
        #For protection against XSS attacks consider CSP with nonces, WAFs and patching your software, XSS auditor causes more problems than it solves.
        #this will forcefully set X-XSS Protection to 0
        more_set_headers "X-XSS-Protection : 0";
        #Tell browsers to not guess the MIME type, this can mitigate some XSS attacks.
        more_set_headers "X-Content-Type-Options : nosniff"
        #Old IE 8 header, this isn't used in modern browser however it is good practise to set this value to noopen
        more_set_headers "X-Download-Options : noopen";
        #Legacy HTTP header, enforces same origin policy for sites that use Adobe Flash and Microsoft Silverlight
        more_set_headers "X-Permitted-Cross-Domain-Policies : none"
                
        ##
        # Logging Settings
        ##

        #access_log /var/log/nginx/access.log; #Disabled for performance

        access_log off;
        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##

        gzip on;
        gzip_min_length 1499;
        gzip_disable "msie6";
        gzip_vary on;
        gzip_static on;
        gzip_proxied any;
        gzip_comp_level 4;
        gzip_buffers 16 8k;
        gzip_http_version 1.1;
        gzip_types
           application/atom+xml
           application/javascript
           application/json
           application/ld+json
           application/manifest+json
           application/rss+xml
           application/vnd.geo+json
           application/vnd.ms-fontobject
           application/wasm application/x-font-ttf
           application/x-web-app-manifest+json
           application/xhtml+xml application/xml
           image/bmp
           image/svg+xml
           image/x-icon
           font/opentype
           text/cache-manifest
           text/css
           text/javascript
           text/plain
           text/vcard
           text/vnd.rim.location.xloc
           text/vtt
           text/x-component
           text/x-cross-domain-policy
           text/xml
           application/xml+rss;
                
        ##
        # GeoIP
        ##

        #GeoIP (optional)
        #geoip_country  /usr/local/share/GeoIP/GeoIP.dat;
        #geoip_city     /usr/local/share/GeoIP/GeoLiteCity.dat;

        ##
        # Performance and Cache
        ##

        #See - https://www.nginx.com/blog/thread-pools-boost-performance-9x/
        aio threads;

        #Enable 0-RTT support for TLS 1.3
        ssl_early_data on;
        proxy_set_header Early-Data $ssl_early_data;
        
        ##
        # Basic DoS mitigations
        # Default values here are very high so it can work well for everybody without false positives, you can fine tune rate limiting per vhost.
        ##
                
        ##Limit concurrent connections to 130, most browsers will open up lots of concurrent connections but will never go above 100.
        limit_conn_zone $binary_remote_addr zone=limit_per_ip:10m;
        limit_conn limit_per_ip 130;

        #Limit requests up to 500 per second per ip
        limit_req_zone $binary_remote_addr zone=allips:10m rate=500r/s;
        limit_req zone=allips burst=400 nodelay;
        
        #Return 429 when rate limiting instead of 503
        limit_req_status 429;
        limit_conn_status 429;
        
        #PHP
        fastcgi_buffers 256 32k;
        fastcgi_buffer_size 256k;
        fastcgi_connect_timeout 4s;
        fastcgi_send_timeout 120s;
        fastcgi_read_timeout 120s;
        fastcgi_busy_buffers_size 512k;
        fastcgi_temp_file_write_size 512K;
        reset_timedout_connection on;

        #Others
        open_file_cache max=5000 inactive=240s;
        open_file_cache_valid 60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors off;

        client_max_body_size 20M;
        client_header_buffer_size 5k;
        large_client_header_buffers 3 15k;
        client_body_buffer_size 32k;
        client_body_timeout 15;
        client_header_timeout 15;
        keepalive_timeout 60;
        send_timeout 15;
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
}
