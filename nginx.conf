# ----------------------------------------------------------------------------------------------
# Secure NGINX Config
# Copyright (c) 2022-2024 Esad Cetiner
#
# This configuration template is distributed under GPLv2
# Please see the included LICENSE file for full details
# ----------------------------------------------------------------------------------------------

# CIS NGINX 2.2.1 v2.1.0
user                www-data;
worker_processes    auto;
worker_cpu_affinity auto;
pid                 /run/nginx.pid;

# Make sure you followed the installation instructions to ensure the bare minimum
# number of NGINX modules are installed. This will load all installed NGINX modules.
include modules-enabled/*.conf;

# Enable JIT for better regex performance
pcre_jit on;

events
{
    worker_connections 16384;
    multi_accept       on;
    use                epoll;
}

# worker_rlimit_nofile = (worker_connections * 1) + 500
# worker_rlimit_nofile = (worker_connections * 2) + 500 if you use NGINX as reverse proxy

worker_rlimit_nofile 33268;

http
{
    #
    # [ Basic Settings ]
    #

    server_names_hash_bucket_size 64;

    include      /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Not specifying an webroot within a server block or location block can make
    # files accessible to the interent that you weren't intending to be public.
    # This sets an default empty webroot to avoid that from happening.
    root /var/www/empty-webroot/;

    # Use local DNS stub resolver to prevent DNS spoofing attacks
    # Specifying public DNS Servers within NGINX (Even within your local network) can result in
    # DNS spoofing in some situations although most of these issues have been fixed.
    # See README.md if you have this error in your log: (111: Connection refused)
    # See: https://blog.zorinaq.com/nginx-resolver-vulns/
    resolver         127.0.0.53;
    resolver_timeout 60s;

    # Redirect all HTTP Request to HTTPS by default
    # CIS NGINX 4.1.1 v2.1.0
    server
    {
        listen [::]:80 default_server;
        listen 80      default_server;

        server_name _;

        return 301 https://$host$request_uri;
    }

    # Protect against host header injection attacks by rejecting unknown hostnames.
    # If you have server blocks listening on ports other than 443 then add those ports here.
    # As a side effect, you'll face fewer attacks from bots attacking by IP address.
    # CIS NGINX 2.4.2 v2.1.0
    server
    {
        listen [::]:443 ssl default_server;
        listen 443      ssl default_server;

        server_name _;

        return 403;

        # Use any certificate, it doesn't matter what you use here.
        ssl_certificate     /etc/ssl/certs/ssl-cert-snakeoil.pem;
        ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
    }

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*.conf;

    #
    # [ TLS Settings ]
    #

    # CIS NGINX 4.1.14, 4.1.12, 4.1.5 and 4.1.4 v2.1.0
    ssl_protocols             TLSv1.2 TLSv1.3;
    ssl_ecdh_curve            X25519:X448:secp256r1:secp384r1:secp521r1:sect571r1;
    # ssl_ecdh_curve          secp384r1:secp521r1:sect571r1; # Use this for 100% on key-exchange on SSL labs
    ssl_session_timeout       1d;
    ssl_session_cache         shared:SSL:50m;
    ssl_session_tickets       off;
    ssl_ciphers               ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-ARIA256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-CCM8:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-ARIA128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;
    # include                 /etc/nginx/snippets/chacha20-non-aes-ni.conf; # Prioritize chacha20 for clients that don't support AES-NI
    ssl_prefer_server_ciphers on;
    ssl_dhparam               /etc/letsencrypt/ssl-dhparams.pem;

    # Enable OCSP stapling
    # CIS NGINX 4.1.7 v2.1.0
    ssl_stapling            on;
    ssl_stapling_verify     on;
    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem; # <- add path to cert chain for OCSP stapling

    #
    # [ Information Leakage ]
    #

    # Hide server software/versions
    # CIS NGINX 2.5.1 and 2.5.4 v2.1.0
    proxy_hide_header X-Powered-By;
    proxy_hide_header X-AspNet-Version;
    proxy_hide_header X-AspNetMvc-Version;
    proxy_hide_header X-Runtime;
    proxy_hide_header X-Redirect-By;
    server_tokens     off;

    # Strip Nginx Server header
    # Use the hide-nginx.conf snippet to fully hide the fact your using NGINX.
    more_set_headers "Server : ";

    #
    # [ Common Security Headers ]
    #

    more_set_headers "X-XSS-Protection : 0"; # Disable insecure XSS auditor on old browsers see: https://portswigger.net/research/abusing-chromes-xss-auditor-to-steal-tokens
    more_set_headers "X-Content-Type-Options : nosniff"; # Don't guess mime type to avoid XSS CIS NGINX 5.3.2 v2.1.0
    more_set_headers "X-Download-Options : noopen";
    more_set_headers "X-Permitted-Cross-Domain-Policies : none";

    #
    # [ Logging Settings ]
    #

    # Always log by default
    # CIS NGINX 3.3, 3.2, and 3.1 v2.1.0
    access_log /var/log/nginx/default_access.log;
    error_log  /var/log/nginx/default_error.log info;

    #
    # [ Compression Settings ]
    #

    gzip              on;
    gzip_min_length   1499;
    gzip_disable      "msie6";
    gzip_vary         on;
    gzip_static       on;
    gzip_proxied      any;
    gzip_comp_level   4;
    gzip_buffers      16 8k;
    gzip_http_version 1.1;
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/wasm application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml application/xml
        image/bmp
        image/svg+xml
        image/x-icon
        font/opentype
        text/cache-manifest
        text/css
        text/javascript
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy
        text/xml
        application/xml+rss;

    # Uncomment to activate Brotli, make sure the Brotli module is installed and activated.
    # include /etc/nginx/snippets/brotli.conf;

    #
    # [ Performance and Cache ]
    #

    # See: https://www.nginx.com/blog/thread-pools-boost-performance-9x/
    aio threads;

    # Cache frequently accessed files
    open_file_cache          max=5000 inactive=240s;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 5;
    open_file_cache_errors   off;

    sendfile    on;
    tcp_nopush  on;
    tcp_nodelay on;

    # 0-RTT with TLSv1.3 can significantly improve the performance of an initial TLS connection, especially if combined with HTTP3.
    # This feature is disabled by default due to risks of replay attacks.
    # See: https://blog.cloudflare.com/even-faster-connection-establishment-with-quic-0-rtt-resumption/
    # Uncomment below to activate 0-RTT, make sure you are aware of the risks before activating.
    # Per server block configuration is not supported.
    # include /etc/nginx/snippets/0-rtt.conf;

    #
    # [ Basic DoS mitigations ]
    # The rate limiting here is intentionally lax, if you want stricter and more granular rate limiting
    # then you'll have to create your own. It's difficult to craft strict rate limiting rules without knowing
    # anything about the kind of applications your hosting.
    #

    # Limit the number of concurrent connections.
    # CIS NGINX 5.2.4 v2.1.0
    limit_conn_zone $binary_remote_addr zone=conn_per_ip:10m;
    limit_conn      conn_per_ip 200;

    # Rate limit very aggressive clients
    # CIS NGINX 5.2.5 v2.1.0
    limit_req_zone $binary_remote_addr zone=default_ratelimit:10m rate=7500r/m;
    limit_req      zone=default_ratelimit burst=10000 nodelay;

    # Return 429 when rate limiting instead of 503
    # You can set this to 444 to save a few CPU cycles
    limit_req_status  429;
    limit_conn_status 429;

    #
    # [ Buffers and timeout ]
    #

    # PHP
    fastcgi_buffers              256 32k;
    fastcgi_buffer_size          256k;
    fastcgi_connect_timeout      4s;
    fastcgi_send_timeout         120s;
    fastcgi_read_timeout         120s;
    fastcgi_busy_buffers_size    512k;
    fastcgi_temp_file_write_size 512K;
    reset_timedout_connection    on;

    # Set size limits for headers and body
    # CIS NGINX 5.2.2 and 5.2.3 v2.1.0
    client_max_body_size        100k;
    client_header_buffer_size   5k;
    large_client_header_buffers 2 2k;
    client_body_buffer_size     32k;

    # Keep timeouts low to mitigate slow loris like attacks
    # CIS NGINX 2.4.4, 2.4.3, and 5.2.1 v2.1.0
    client_body_timeout   10;
    client_header_timeout 10;
    keepalive_timeout     10;
    send_timeout          10;
}
