# ----------------------------------------------------------------------------------------------
# Secure Nginx Config
# Copyright (c) 2022-2024 Esad Cetiner
#
# This configuration template is distributed under GPLv2
# Please see the included LICENSE file for full details
# ----------------------------------------------------------------------------------------------

user www-data;
worker_processes auto;
worker_cpu_affinity auto;
pid /run/nginx.pid;

load_module modules/ngx_http_headers_more_filter_module.so;
# uncomment to use CrowdSec Nginx Bouncer with Lua
# Load CrowdSec
# load_module modules/ndk_http_module.so;
# load_module modules/ngx_http_lua_module.so;
# uncomment if you use modsecurity
# If you use ModSecurity and CrowdSec then make sure you load CrowdSec FIRST
# Load ModSecurity
# load_module modules/ngx_http_modsecurity_module.so;
# uncomment to use brotli
# Load Brotli
# load_module modules/ngx_http_brotli_filter_module.so;
# load_module modules/ngx_http_brotli_static_module.so;

# Enable Jit for better regex performance
pcre_jit on;

events
{
        worker_connections 16384;
        multi_accept       on;
        use                epoll;
}

# worker_rlimit_nofile = (worker_connections * 1) + 500
# worker_rlimit_nofile = (worker_connections * 2) + 500 if you use nginx as reverse proxy

worker_rlimit_nofile 33268;

http
{
        ##
        # Basic Settings
        ##

        server_names_hash_bucket_size 64;

        include      /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Not specifying a webroot within a server block can have very severe consequences and
        # potentially expose everything stored on the server to the internet, fully
        # accessable for anybody with a web browser to view.
        # This directive will set the default webroot to an empty webroot to avoid this miscconfiguration.
        root /var/www/empty-webroot/;
        
        # Use localhost resolver to prevent DNS spoofing attacks
        # Specifying public DNS Servers within Nginx, even within your local network can result in DNS spoofing.
        # Some of these issues have been fixed in Nginx, but not all.
        # Try using 127.0.0.11 or 127.0.0.1 if DNS doesn't work or if you see "(111: Connection refused) while resolving" in your error.log
        # This directive is required if your using CrowdSec Nginx Bouncer and connecting to a LAPI with a domain name.
        # See - https://blog.zorinaq.com/nginx-resolver-vulns/
        resolver         127.0.0.53;
        resolver_timeout 60s;

        # Redirect to HTTPS
        server
        {
            # Listen on port 80 with IPv4 and IPv6 as default server
            listen [::]:80 default_server;
            listen 80      default_server;

            server_name _;

            # Redirect all requests to HTTPS
            return 301 https://$host$request_uri;

            # Log Requests to default server block
            access_log /var/log/nginx/default_access.log;
            error_log  /var/log/nginx/default_error.log;
        }

        # VirtualHosts and configs includes
        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*.conf;

        ##
        # TLS Settings
        ##

        ssl_protocols             TLSv1.2 TLSv1.3;
        ssl_ecdh_curve            X25519:X448:secp256r1:secp384r1:secp521r1:sect571r1;
        # uncomment and replace above if you want 100% in key exchange for ssl labs
        # ssl_ecdh_curve          secp384r1:secp521r1:sect571r1;
        ssl_session_timeout       1d;
        ssl_session_cache         shared:SSL:50m;
        ssl_session_tickets       off;
        ssl_ciphers               ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-CCM:ECDHE-ECDSA-ARIA256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-CCM8:ECDHE-ECDSA-AES128-CCM:ECDHE-ECDSA-ARIA128-GCM-SHA256:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256;
        # include                 /etc/nginx/snippets/chacha20-non-aes-ni.conf; # Prioritize chacha20 for clients that don't support AES-NI
        ssl_prefer_server_ciphers on;
        ssl_dhparam               /etc/letsencrypt/ssl-dhparams.pem;

        # OCSP settings
        ssl_stapling            on;
        ssl_stapling_verify     on;
        ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem; # <- add path to cert chain for OCSP stapling

        ##
        # Headers
        ##

        # Remove Nginx version from headers and error pages
        server_tokens off;

        # Hide PHP
        proxy_hide_header X-Powered-By;
        # Hide nginx header
        more_set_headers "Server : ";

        # Security Headers

        # XSS auditor can introduce XSS vulnerabilities in otherwise safe code, it is deprecated and should be disabled.
        # For protection against XSS attacks consider CSP with nonces, WAFs and patching your software, XSS auditor causes more problems than it solves.
        # this will forcefully set X-XSS Protection to 0
        more_set_headers "X-XSS-Protection : 0";
        # Tell browsers to not guess the MIME type, this can mitigate some XSS attacks.
        more_set_headers "X-Content-Type-Options : nosniff"
        # Old IE 8 header, this isn't used in modern browser however it is good practise to set this value to noopen
        more_set_headers "X-Download-Options : noopen";
        # Legacy HTTP header, enforces same origin policy for sites that use Adobe Flash and Microsoft Silverlight
        more_set_headers "X-Permitted-Cross-Domain-Policies : none"

        ##
        # Logging Settings
        ##

        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##

        gzip              on;
        gzip_min_length   1499;
        gzip_disable      "msie6";
        gzip_vary         on;
        gzip_static       on;
        gzip_proxied      any;
        gzip_comp_level   4;
        gzip_buffers      16 8k;
        gzip_http_version 1.1;
        gzip_types
           application/atom+xml
           application/javascript
           application/json
           application/ld+json
           application/manifest+json
           application/rss+xml
           application/vnd.geo+json
           application/vnd.ms-fontobject
           application/wasm application/x-font-ttf
           application/x-web-app-manifest+json
           application/xhtml+xml application/xml
           image/bmp
           image/svg+xml
           image/x-icon
           font/opentype
           text/cache-manifest
           text/css
           text/javascript
           text/plain
           text/vcard
           text/vnd.rim.location.xloc
           text/vtt
           text/x-component
           text/x-cross-domain-policy
           text/xml
           application/xml+rss;

        ##
        # Brotli Settings
        ##

        # Uncomment to activate Brotli, make sure the Brotli module is installed and activated.
        # include /etc/nginx/snippets/brotli.conf;

        ##
        # GeoIP
        ##

        # GeoIP (optional)
        # geoip_country  /usr/local/share/GeoIP/GeoIP.dat;
        # geoip_city     /usr/local/share/GeoIP/GeoLiteCity.dat;

        ##
        # Performance and Cache
        ##

        # See - https://www.nginx.com/blog/thread-pools-boost-performance-9x/
        aio threads;

        # 0-RTT with TLSv1.3 can significantly improve the performance of an initial TLS connection, especially if combined with HTTP3.
        # This feature is disabled by default due to risks of replay attacks.
        # See - https://blog.cloudflare.com/even-faster-connection-establishment-with-quic-0-rtt-resumption/
        # Uncomment below to activate 0-RTT, make sure you are aware of the risks before activating.
        # Per server block configuration is not supported.
        # include /etc/nginx/snippets/0-rtt.conf;

        ##
        # Basic DoS mitigations
        # Default values here are very high so it can work well for everybody without false positives, you can fine tune rate limiting per vhost.
        ##

        # Limit concurrent connections to 130, most browsers will open up lots of concurrent connections but will never go above 100.
        limit_conn_zone $binary_remote_addr zone=limit_per_ip:10m;
        limit_conn      limit_per_ip 130;

        # Limit requests up to 500 per second per ip
        limit_req_zone $binary_remote_addr zone=allips:10m rate=500r/s;
        limit_req      zone=allips burst=400 nodelay;

        # Return 429 when rate limiting instead of 503
        limit_req_status  429;
        limit_conn_status 429;

        # PHP
        fastcgi_buffers              256 32k;
        fastcgi_buffer_size          256k;
        fastcgi_connect_timeout      4s;
        fastcgi_send_timeout         120s;
        fastcgi_read_timeout         120s;
        fastcgi_busy_buffers_size    512k;
        fastcgi_temp_file_write_size 512K;
        reset_timedout_connection    on;

        # Cache frequently accessed files
        open_file_cache          max=5000 inactive=240s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;

        # Set size limits for headers and body
        client_max_body_size        20M;
        client_header_buffer_size   5k;
        large_client_header_buffers 3 15k;
        client_body_buffer_size     32k;

        # Keep timeouts low to mitigate slow loris like attacks
        client_body_timeout   10;
        client_header_timeout 10;
        keepalive_timeout     10;
        send_timeout          10;

        sendfile    on;
        tcp_nopush  on;
        tcp_nodelay on;
}
